#!/usr/bin/python3 -tt
#
# Copyright 2009-2010 Facebook, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
"""
code-review - a tool to review changes in a source control repository

This tool provides an interactive shell for reviewing diffs in a Git,
Mercurial, or EdenSCM repository.  It accepts arguments similar to "git diff"
for specifying the diffs to review.  When started, it walks the user through
each file changed, prompting to open an external diff program or text editor
for each file.

Configuration:

- CODE_REVIEW_DIFF
  If set, this environment variable specifies the program to use to view diffs
  for modified files.  If unset, the default diff program is tkdiff when
  DISPLAY is set, and "vimdiff -R" when DISPLAY is unset.

- CODE_REVIEW_VIEW, GIT_EDITOR, VISUAL, EDITOR
  These environment variables are checked in order to find the program to use
  to view new files.  If none of these are set, vi is used.
"""

import argparse
import logging
import os
import sys
from pathlib import Path
from typing import Any, Dict, Optional

import scmreview.review as review
import scmreview.scm.repo
import scmreview.scm.util

RETCODE_SUCCESS = 0
RETCODE_ARGUMENTS_ERROR = 1


def parse_args():
    ap = argparse.ArgumentParser(add_help=False)
    ap.add_argument('-c', '--commit',
                    action='store', dest='commit', default=None,
                    help='Diff the specified commit against its parent')
    ap.add_argument('-d', '--diff', action='store',
                    metavar='DIFF', default=None,
                    help='Review the specified diff ID from an external code '
                    'review system')
    ap.add_argument('--onto',
                    action='store', dest='onto', metavar='COMMIT',
                    default=None,
                    help='Apply external review patches onto the specified '
                    'commit')
    ap.add_argument('--cached',
                    action='store_true', dest='cached', default=False,
                    help='Diff against the index instead of the working tree')
    ap.add_argument('--config',
                    metavar="PATH",
                    type=Path,
                    help='Load configuration from the specified file '
                    '(default=~/.scmreview)')
    ap.add_argument('--repo',
                    action='store', dest='repo',
                    metavar='DIRECTORY', default=None,
                    help='Path to the source control repository')
    ap.add_argument('-?', '--help',
                    action='help', help='Print this help message and exit')
    ap.add_argument('parent_commit',
                    nargs='?', help='The parent commit to diff against')
    ap.add_argument('child_commit',
                    nargs='?', help='The child commit to diff against')

    args = ap.parse_args()

    # --onto is only valid with --diff
    if args.onto is not None and args.diff is None:
        ap.error('--onto is only valid when used with --diff')

    return ap, args


def get_home_dir() -> Path:
    home_dir = os.environ["HOME"]
    if home_dir is not None:
        return Path(home_dir)

    pwent = pwd.getpwuid(os.getuid())
    return Path(pwent.pw_dir)


class ConfigError(Exception):
    def __init__(self, filename: Path, ex: Exception) -> None:
        self.filename = filename
        self.ex = ex
        msg = f"error loading config file {filename}: {ex}"
        super().__init__(msg)


class Config:
    def __init__(self, path: Optional[str]):
        if path is None:
            path = get_home_dir() / ".scmreview"
        self.path = path

        self._data = self._load()

    def get(self, name: str) -> Any:
        return self._data.get(name)

    def _load(self) -> Dict[str, Any]:
        try:
            data = self.path.read_text()
        except FileNotFoundError:
            return {}

        config_vars: Dict[str, Any] = {}
        try:
            code = compile(data, self.path, "exec")
            exec(code, config_vars)
        except Exception as ex:
            raise ConfigError(self.path, ex)

        return config_vars


def create_review_from_commits(
    repo: scmreview.scm.repo.RepositoryBase,
    parent: str,
    child: str,
) -> review.Review:
    diff = repo.getDiff(parent, child)
    return review.Review(repo, diff)


def create_review(
    repo: scmreview.scm.repo.RepositoryBase,
    config: Config,
    ap: argparse.ArgumentParser,
    args: argparse.Namespace,
) -> review.Review:
    if args.commit is not None:
        if args.diff is not None:
            ap.error('--commit and --diff are mutually exclusive')
        if args.cached:
            ap.error('--commit and --cached are mutually exclusive')
        if not (args.parent_commit is None and args.child_commit is None):
            ap.error('additional commit arguments may not be specified '
                     'with --commit')
        return create_review_from_commits(repo, args.commit + '^', args.commit)

    if args.diff is not None:
        if args.cached:
            ap.error('--diff and --cached are mutually exclusive')
        if not (args.parent_commit is None and args.child_commit is None):
            ap.error('additional commit arguments may not be specified '
                     'with --diff')

        diff_fn = config.get("create_diff_review")
        if diff_fn is None:
            ap.error(
                f"cannot use --diff: no create_diff_review() function "
                f"defined in {config.path}"
            )
        return diff_fn(repo, args.diff)

    if args.cached:
        if args.child_commit is not None:
            ap.error('cannot specify --cached with two commits')
        child = repo.get_index_commit_id()
        if child is None:
            ap.error('--cached can only be used in git repositories')
        parent = args.parent_commit
        if parent is None:
            parent = repo.get_default_diff_parent()
        return create_review_from_commits(repo, parent, child)

    parent = args.parent_commit
    child = args.child_commit
    if parent is None:
        parent = repo.get_default_diff_parent()
    if child is None:
        child = repo.get_default_diff_child()
    return create_review_from_commits(repo, parent, child)


def main(argv) -> int:
    ap, args = parse_args()

    logging.basicConfig(level=logging.DEBUG, stream=sys.stderr,
                        format='%(asctime)s %(message)s')

    # Load the scmreview config script
    try:
        config = Config(args.config)
    except ConfigError as ex:
        import traceback
        tb_msg = "".join(traceback.format_tb(ex.ex.__traceback__)).rstrip()
        print(f"{ex}\n{tb_msg}", file=sys.stderr)
        return RETCODE_ARGUMENTS_ERROR

    # Find the repository we are operating in
    start_path = Path.cwd() if args.repo is None else Path(args.repo)
    repo = scmreview.scm.util.find_repo(start_path)
    if repo is None:
        ap.error(f"unable to find a repository at {start_path}")
        return RETCODE_ARGUMENTS_ERROR
    with repo:
        rev = create_review(repo, config, ap, args)
        return review.CliReviewer(rev).run()


if __name__ == '__main__':
    sys.exit(main(sys.argv))
