#!/home/simpkins/bin/hg_debugpython
#!/usr/bin/python -tt
#
# Copyright 2009-2010 Facebook, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
"""
git-review - a tool to review changes in a git repository

This tool provides an interactive shell for reviewing diffs in a git
repository.  It accepts arguments similar to "git diff" for specifying the
diffs to review.  When started, it walks the user through each file changed,
prompting to open an external diff program or text editor for each file.

Configuration:

- CODE_REVIEW_DIFF
  If set, this environment variable specifies the program to use to view diffs
  for modified files.  If unset, the default diff program is tkdiff when
  DISPLAY is set, and "vimdiff -R" when DISPLAY is unset.

- CODE_REVIEW_VIEW, GIT_EDITOR, VISUAL, EDITOR
  These environment variables are checked in order to find the program to use
  to view new files.  If none of these are set, vi is used.
"""

from __future__ import absolute_import, division, print_function

import argparse
import logging
import os
import sys

import gitreview.git as git
import gitreview.review as review
import gitreview.scm.util

import arcanist.apply_diffs
from arcanist import NoSuchRevisionError

RETCODE_SUCCESS = 0
RETCODE_ARGUMENTS_ERROR = 1
RETCODE_PHABRICATOR_ERROR = 2

f_progname = os.path.basename(sys.argv[0])


class NoDiffsError(Exception):
    pass


def parse_args():
    ap = argparse.ArgumentParser(add_help=False)
    ap.add_argument('-c', '--commit',
                    action='store', dest='commit', default=None,
                    help='Diff the specified commit against its parent')
    ap.add_argument('-d', '--differential', action='store',
                    dest='differential', default=None,
                    help='Review the specified differential revision')
    ap.add_argument('--onto',
                    action='store', dest='onto', metavar='COMMIT',
                    default=None,
                    help='Apply differential patches onto the specified '
                    'commit')
    ap.add_argument('--cached',
                    action='store_true', dest='cached', default=False,
                    help='Diff against the index instead of the working tree')
    ap.add_argument('--git-dir',
                    action='store', dest='git_dir',
                    metavar='DIRECTORY', default=None,
                    help='Path to the git repository directory')
    ap.add_argument('--work-tree',
                    action='store', dest='work_tree',
                    metavar='DIRECTORY', default=None,
                    help='Path to the git repository working tree')
    ap.add_argument('--hg-repo',
                    action='store', dest='hg_repo',
                    metavar='DIRECTORY', default=None,
                    help='Path to the mercurial repository')
    ap.add_argument('-?', '--help',
                    action='help', help='Print this help message and exit')
    ap.add_argument('parent_commit',
                    nargs='?', help='The parent commit to diff against')
    ap.add_argument('child_commit',
                    nargs='?', help='The child commit to diff against')

    args = ap.parse_args()

    # --onto is only valid with --differential
    if args.onto is not None and args.differential is None:
        ap.error('--onto is only valid when used with --differential')

    return ap, args


def setup_phabricator_review(repo, options):
    rev_id_str = options.differential
    try:
        # Accept D123456 or just 123456
        if rev_id_str.startswith('D'):
            rev_id = int(rev_id_str[1:])
        else:
            rev_id = int(rev_id_str)
    except ValueError:
        raise NoSuchRevisionError(rev_id_str)

    print('Checking for diffs from revision %s' % (rev_id,))

    return setup_phabricator_review_impl(repo, options, rev_id)


def setup_phabricator_review_impl(repo, options, rev_id):
    commits = arcanist.apply_diffs.apply_diffs(repo, rev_id)

    # Raise an error if this revision has no diffs at all
    if not commits:
        raise NoDiffsError('No diffs applied from phabricator revision')

    # Use the last commit in the chain as the child
    child = str(commits[-1])
    # Use the first parent of the child the parent
    parent = '%s^' % (commits[-1],)

    diff = repo.getDiff(parent, child)
    rev = review.Review(repo, diff)

    # Add commit aliases for each individual diff
    n = 0
    for commit in commits:
        rev.set_commit_alias('diff%d' % (n + 1,), str(commit))
        n += 1

    # Also add an alias called "prev" for the most recent diff before this one
    if len(commits) > 1:
        rev.set_commit_alias('prev', str(commits[-2]))

    return rev


def main(argv):
    ap, args = parse_args()

    logging.basicConfig(level=logging.DEBUG, stream=sys.stderr,
                        format='%(asctime)s %(message)s')

    # Find the repository we are operating in
    with gitreview.scm.util.find_repo(ap, args) as repo:
        gitreview.scm.util.resolve_commits(repo, ap, args)
        if args.differential:
            try:
                rev = setup_phabricator_review(repo, args)
            except (NoSuchRevisionError, git.PatchFailedError,
                    NoDiffsError) as ex:
                sys.stderr.write('%s: error: %s\n' % (f_progname, ex))
                return RETCODE_PHABRICATOR_ERROR
        else:
            diff = repo.getDiff(args.parent_commit, args.child_commit)
            rev = review.Review(repo, diff)

        return review.CliReviewer(rev).run()


if __name__ == '__main__':
    sys.exit(main(sys.argv))
