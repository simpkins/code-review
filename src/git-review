#!/usr/local/bin/python -tt
#
# Copyright 2009-2010 Facebook, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
"""
git-review - a tool to review changes in a git repository

This tool provides an interactive shell for reviewing diffs in a git
repository.  It accepts arguments similar to "git diff" for specifying the
diffs to review.  When started, it walks the user through each file changed,
prompting to open an external diff program or text editor for each file.

Configuration:

- GIT_REVIEW_DIFF
  If set, this environment variable specifies the program to use to view diffs
  for modified files.  If unset, the default diff program is tkdiff when
  DISPLAY is set, and "vimdiff -R" when DISPLAY is unset.

- GIT_REVIEW_VIEW, GIT_EDITOR, VISUAL, EDITOR
  These environment variables are checked in order to find the program to use
  to view new files.  If none of these are set, vi is used.
"""

import optparse
import os
import sys

import gitreview.git as git
import gitreview.review as review

import arcanist.gitapply

#import gitreview.diffcamp as diffcamp
#import gitreview.diffcamp.dcgit as dcgit

RETCODE_SUCCESS = 0
RETCODE_ARGUMENTS_ERROR = 1
RETCODE_DIFFCAMP_ERROR = 2

f_progname = os.path.basename(sys.argv[0])


class OptionsError(Exception):
    pass


class UsageError(Exception):
    pass


class NoDiffsError(Exception):
    pass


class Options(optparse.OptionParser):
    def __init__(self):
        optparse.OptionParser.__init__(self, add_help_option=False,
                                        usage='%prog [options]')
        self.add_option('-c', '--commit',
                        action='store', dest='commit', default=None,
                        help='Diff the specified commit against its parent')
        self.add_option('-d', '--differential', action='store',
                        dest='differential', default=None, type='int',
                        help='Review the specified differential revision')
        self.add_option('--onto',
                        action='store', dest='onto', metavar='COMMIT',
                        default=None,
                        help='Apply differential patches onto the specified '
                             'commit')
        self.add_option('--cached',
                        action='store_true', dest='cached', default=False,
                        help='Diff against the index instead of the working '
                             'tree')
        self.add_option('--git-dir',
                        action='store', dest='git_dir',
                        metavar='DIRECTORY', default=None,
                        help='Path to the git repository directory')
        self.add_option('--work-tree',
                        action='store', dest='work_tree',
                        metavar='DIRECTORY', default=None,
                        help='Path to the git repository working tree')
        self.add_option('-?', '--help',
                        action='callback', callback=self.__helpCallback,
                        help='Print this help message and exit')

    def __helpCallback(self, option, opt, value, parser):
        raise UsageError()

    def error(self, msg):
        # This is called automatically by optparse when an error in the command
        # line options is encountered.
        raise OptionsError(msg)

    def print_usage(self, file = sys.stdout):
        self.print_usage(file = file)

    def print_help(self, file = sys.stdout):
        self.print_help(file = file)

    def __getattr__(self, name):
        if name.startswith('__'):
            raise AttributeError(name)

        # Allow attributes of self.__options to be accessed directly
        return getattr(self.__options, name)

    def parse_argv(self, argv):
        # parse the options
        (self.__options, args) = self.parse_args(argv[1:])

        # --onto is only valid with --differential
        if (self.__options.onto is not None and
            self.__options.differential is None):
            raise OptionsError('--onto is only valid when used with '
                               '--differential')

        # Parse the commit arguments
        if self.__options.commit is not None:
            # If --commit was specified, diff that commit against its parent
            if self.__options.differential is not None:
                msg = '--commit and --differential are mutually exclusive'
                raise OptionsError(msg)
            if self.__options.cached:
                msg = '--commit and --cached are mutually exclusive'
                raise OptionsError(msg)
            if args:
                msg = ('additional commit arguments may not be specified '
                       'with --commit')
                raise OptionsError(msg)

            self.parent_commit = self.__options.commit + '^'
            self.child_commit = self.__options.commit
        elif self.__options.differential is not None:
            # If --differential was specified,
            # review that differential revision
            if self.__options.cached:
                msg = '--differential and --cached are mutually exclusive'
                raise OptionsError(msg)
            if args:
                msg = ('additional commit arguments may not be specified '
                       'with --differential')
                raise OptionsError(msg)

            # We can't compute the parent and child commits now.
            # The code will not use them if it sees that self.differential is
            # set.
            self.parent_commit = None
            self.child_commit = None
        else:
            # Default parent and child commits, if not otherwise specified
            if self.__options.cached:
                self.parent_commit = git.COMMIT_HEAD
                self.child_commit = git.COMMIT_INDEX
            else:
                self.parent_commit = git.COMMIT_INDEX
                self.child_commit = git.COMMIT_WD

            # Parse the remaining arguments
            num_args = len(args)
            if num_args == 1:
                self.parent_commit = args[0]
            elif num_args == 2:
                if self.__options.cached:
                    msg = 'cannot specify --cached with two commits'
                    raise OptionsError(msg)
                self.parent_commit = args[0]
                self.child_commit = args[1]
            elif num_args > 2:
                raise OptionsError('trailing arguments: ' + ' '.join(args[2:]))


def error_msg(msg):
    sys.stderr.write('%s: error: %s\n' % (f_progname, msg))


def warning_msg(msg):
    sys.stderr.write('%s: warning: %s\n' % (f_progname, msg))


def setup_diffcamp_review(repo, options):
    rev_id = options.differential
    print 'Checking for diffs from revision %s' % (rev_id,)
    raise Exception('TBD')
    applier = dcgit.RevisionApplier(repo, rev_id, onto=options.onto,
                                    log=sys.stdout)

    # Raise an error if this revision has no diffs at all
    if not applier.rev.diffs:
        raise NoDiffsError()

    if applier.diffsToApply:
        applier.applyAll()
    else:
        print '  No new diffs to apply'

    # Compute the list of commits for this differential revision
    # TODO: It would be nicer to save this information in the RevisionApplier,
    # rather than having to re-compute the list here.
    dc_commit_chain = dcgit.get_dc_commit_chain(repo, rev_id)

    # Use the last commit in the chain as the child
    child = dc_commit_chain[-1].commit.sha1
    # As the parent, use the commit that the the differential patch was
    # applied to
    parent = dc_commit_chain[-1].appliedOnto

    diff = repo.getDiff(parent, child)
    rev = review.Review(repo, diff)

    # Add commit aliases for each individual diff
    n = 0
    for dc_commit in dc_commit_chain:
        rev.setCommitAlias('diff%d' % (n + 1,), dc_commit.commit.sha1)
        n += 1

    # Also add an alias called "prev" for the most recent diff before this one
    if len(dc_commit_chain) > 1:
        rev.setCommitAlias('prev', dc_commit_chain[-2].commit.sha1)

    return rev


def main(argv):
    # Parse the command line options
    options = Options()
    try:
        options.parse_argv(argv)
    except OptionsError, error:
        options.print_usage(sys.stderr)
        error_msg(error)
        return RETCODE_ARGUMENTS_ERROR
    except UsageError, error:
        options.print_help()
        return RETCODE_SUCCESS

    # Get a Repository object
    repo = git.get_repo(git_dir=options.git_dir,
                        working_dir=options.work_tree)

    if options.differential:
        try:
            rev = setup_diffcamp_review(repo, options)
        except (diffcamp.NoSuchRevisionError, git.PatchFailedError,
                NoDiffsError), ex:
            error_msg(ex)
            return RETCODE_DIFFCAMP_ERROR
    else:
        diff = repo.getDiff(options.parent_commit, options.child_commit)
        rev = review.Review(repo, diff)

    return review.CliReviewer(rev).run()


if __name__ == '__main__':
    sys.exit(main(sys.argv))
