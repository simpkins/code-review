#!/usr/bin/python -tt
#
# Copyright 2009-2010 Facebook, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
"""
git-review - a tool to review changes in a git repository

This tool provides an interactive shell for reviewing diffs in a git
repository.  It accepts arguments similar to "git diff" for specifying the
diffs to review.  When started, it walks the user through each file changed,
prompting to open an external diff program or text editor for each file.

Configuration:

- GIT_REVIEW_DIFF
  If set, this environment variable specifies the program to use to view diffs
  for modified files.  If unset, the default diff program is tkdiff when
  DISPLAY is set, and "vimdiff -R" when DISPLAY is unset.

- GIT_REVIEW_VIEW, GIT_EDITOR, VISUAL, EDITOR
  These environment variables are checked in order to find the program to use
  to view new files.  If none of these are set, vi is used.
"""

import argparse
import os
import sys

import gitreview.git as git
import gitreview.review as review

from arcanist.gitapply import RevisionApplier as ArcRevisionApplier
from arcanist import NoSuchRevisionError

import gitreview.diffcamp.dcgit as dcgit

RETCODE_SUCCESS = 0
RETCODE_ARGUMENTS_ERROR = 1
RETCODE_DIFFCAMP_ERROR = 2

f_progname = os.path.basename(sys.argv[0])


class NoDiffsError(Exception):
    pass


def parse_args():
    ap = argparse.ArgumentParser(add_help=False)
    ap.add_argument('-c', '--commit',
                    action='store', dest='commit', default=None,
                    help='Diff the specified commit against its parent')
    ap.add_argument('-d', '--differential', action='store',
                    dest='differential', default=None,
                    help='Review the specified differential revision')
    ap.add_argument('--onto',
                    action='store', dest='onto', metavar='COMMIT',
                    default=None,
                    help='Apply differential patches onto the specified '
                    'commit')
    ap.add_argument('--cached',
                    action='store_true', dest='cached', default=False,
                    help='Diff against the index instead of the working tree')
    ap.add_argument('--git-dir',
                    action='store', dest='git_dir',
                    metavar='DIRECTORY', default=None,
                    help='Path to the git repository directory')
    ap.add_argument('--work-tree',
                    action='store', dest='work_tree',
                    metavar='DIRECTORY', default=None,
                    help='Path to the git repository working tree')
    ap.add_argument('-?', '--help',
                    action='help', help='Print this help message and exit')
    ap.add_argument('parent_commit',
                    nargs='?', help='The parent commit to diff against')
    ap.add_argument('child_commit',
                    nargs='?', help='The child commit to diff against')

    args = ap.parse_args()

    # --onto is only valid with --differential
    if args.onto is not None and args.differential is None:
        ap.error('--onto is only valid when used with --differential')

    _resolve_commits(args)
    return args


def _resolve_commits(args):
    # Parse the commit arguments
    if args.commit is not None:
        # If --commit was specified, diff that commit against its parent
        if args.differential is not None:
            ap.error('--commit and --differential are mutually exclusive')
        if args.cached:
            ap.error('--commit and --cached are mutually exclusive')
        if not (args.parent_commit is None and args.child_commit is None):
            ap.error('additional commit arguments may not be specified '
                     'with --commit')

        args.parent_commit = args.commit + '^'
        args.child_commit = args.commit
        return

    if args.differential is not None:
        # If --differential was specified,
        # review that differential revision
        if args.cached:
            ap.error('--differential and --cached are mutually exclusive')
        if not (args.parent_commit is None and args.child_commit is None):
            ap.error('additional commit arguments may not be specified '
                     'with --differential')
        # We can't compute the parent and child commits now.
        # The code will not use them if it sees that args.differential is
        # set.
        return

    if args.cached:
        # Diff HEAD or some other parent against the index
        if args.child_commit is not None:
            ap.error('cannot specify --cached with two commits')
        args.child_commit = git.COMMIT_INDEX
        if args.parent_commit is None:
            args.parent_commit = git.COMMIT_HEAD
        return

    # If we are still here there were no special arguments.
    # Just use the parent and child arguments.
    # The child is the working directory, unless otherwise specified.
    if args.child_commit is None:
        args.child_commit = git.COMMIT_WD
    # If neither child or parent is specified, diff the working
    # directory against the index.
    if args.parent_commit is None:
        args.parent_commit = git.COMMIT_INDEX


def setup_diffcamp_review(repo, options):
    rev_id_str = options.differential
    try:
        # Accept D123456 or just 123456
        if rev_id_str.startswith('D'):
            rev_id = int(rev_id_str[1:])
        else:
            rev_id = int(rev_id_str)
    except ValueError:
        raise NoSuchRevisionError(rev_id_str)

    print 'Checking for diffs from revision %s' % (rev_id,)

    applier = ArcRevisionApplier(repo, rev_id,
                                 onto=options.onto, log=sys.stdout)

    # Raise an error if this revision has no diffs at all
    if not applier.rev.diffs:
        raise NoDiffsError()

    if applier.diffs_to_apply:
        applier.apply_all()
    else:
        print '  No new diffs to apply'

    # Compute the list of commits for this differential revision
    # TODO: It would be nicer to save this information in the RevisionApplier,
    # rather than having to re-compute the list here.
    dc_commit_chain = dcgit.get_dc_commit_chain(repo, rev_id)

    # Use the last commit in the chain as the child
    child = dc_commit_chain[-1].commit.sha1
    # As the parent, use the commit that the the differential patch was
    # applied to
    parent = dc_commit_chain[-1].appliedOnto

    diff = repo.getDiff(parent, child)
    rev = review.Review(repo, diff)

    # Add commit aliases for each individual diff
    n = 0
    for dc_commit in dc_commit_chain:
        rev.set_commit_alias('diff%d' % (n + 1,), dc_commit.commit.sha1)
        n += 1

    # Also add an alias called "prev" for the most recent diff before this one
    if len(dc_commit_chain) > 1:
        rev.set_commit_alias('prev', dc_commit_chain[-2].commit.sha1)

    return rev


def main(argv):
    args = parse_args()

    # Get a Repository object
    repo = git.get_repo(git_dir=args.git_dir, working_dir=args.work_tree)

    if args.differential:
        try:
            rev = setup_diffcamp_review(repo, args)
        except (NoSuchRevisionError, git.PatchFailedError,
                NoDiffsError), ex:
            sys.stderr.write('%s: error: %s\n' % (f_progname, ex))
            return RETCODE_DIFFCAMP_ERROR
    else:
        diff = repo.getDiff(args.parent_commit, args.child_commit)
        rev = review.Review(repo, diff)

    return review.CliReviewer(rev).run()


if __name__ == '__main__':
    sys.exit(main(sys.argv))
